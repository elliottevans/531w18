logit((x/100 + 1)/2)
}
invTransf = function(x){
100*(2*inv.logit(x) - 1)
}
genbal_sub$dem_margin_trans = transf(genbal_sub$dem_margin)
#Plot untransformed democratic margin (diff in percentage points)
plot(genbal_sub$dem_margin,type='l')
genbal_sub
#Plot untransformed time series of the differenced data
plot(diff(genbal_sub$dem_margin),type='l')
#Plot untransformed time series of the differenced data
plot(diff(genbal_sub$dem_margin),type='l')
#Plot untransformed democratic margin (diff in percentage points)
plot(genbal_sub$dem_margin,type='l')
#Plot untransformed time series of the differenced data
plot(diff(genbal_sub$dem_margin),type='l')
#plot time series of the transformed margin
plot(genbal_sub$dem_margin_trans,type='l')
#Plot time series the differenced transformed democratic margin
plot(diff(genbal_sub$dem_margin_trans),type='l')
acf(genbal_sub$dem_margin)
acf(genbal_sub$dem_margin_trans)
acf(genbal_sub$dem_margin)
acf(genbal_sub$dem_margin_trans)
#Plot untransformed democratic margin (diff in percentage points)
plot(genbal_sub$dem_margin,type='l')
plist = qlist = aiclist = c()
for(p in 0:6){
for(q in 0:6){
fit = arima(genbal_sub$dem_margin_trans,order=c(p,1,q),method='ML')
plist = append(plist,p)
qlist = append(qlist,q)
aiclist = append(aiclist,fit$aic)
}
}
aicdf = data.frame(p = plist, q = qlist, aic = aiclist)
#ARIMA(2,1,4) performs well by AIC criteria
aicdf
which.max(abs(aicdf$aic))
fit = arima(genbal_sub$dem_margin_trans,order=c(1,1,5),method='ML')
fit
plist = qlist = aiclist = c()
for(p in 0:6){
for(q in 0:6){
fit = arima(genbal_sub$dem_margin_trans,order=c(p,1,q))
plist = append(plist,p)
qlist = append(qlist,q)
aiclist = append(aiclist,fit$aic)
}
}
aicdf = data.frame(p = plist, q = qlist, aic = aiclist)
#ARIMA(2,1,4) performs well by AIC criteria
aicdf
fit = arima(genbal_sub$dem_margin_trans,order=c(1,1,5))
fit
fit_vals = invTransf(fitted(fit))
plot(genbal_sub$dem_margin,type='l',col='grey')
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fit_vals, type='l',lwd=3)
fit_vals
plot(genbal_sub$dem_margin,type='l',col='grey')
points(fit_vals, type='l',lwd=3)
points(fit_vals, type='l',lwd=2)
genbal_sub$fitted = fit_vals
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
plot(fitted ~ enddate,genbal_sub,type='l',lwd=2)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
fit = arima(genbal_sub$dem_margin_trans,order=c(0,1,5))
fit
fit = arima(genbal_sub$dem_margin_trans,order=c(0,1,5))
fit
genbal_sub$fitted = fit_vals
fit_vals = invTransf(fitted(fit))
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
fit = arima(genbal_sub$dem_margin_trans,order=c(0,1,5))
fit
fit_vals = invTransf(fitted(fit))
genbal_sub$fitted = fit_vals
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
future = forecast(fit, h = 50)
plot(future)
forecast
future
invTransf(future)
future = forecast(fit, h = 50)
future$mean<-invTransf(future$mean)
future$upper<-invTransf(future$upper)
future$lower<-invTransf(future$lower)
future$x<-invTransf(future$x)
plot(future)
fit = arima(genbal_sub$dem_margin_trans,order=c(1,1,5))
fit
fit_vals = invTransf(fitted(fit))
genbal_sub$fitted = fit_vals
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
future = forecast(fit, h = 50)
future$mean<-invTransf(future$mean)
future$upper<-invTransf(future$upper)
future$lower<-invTransf(future$lower)
future$x<-invTransf(future$x)
plot(future)
plot(future,genbal_sub$enddate)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
#Forecast 30 days out
future = forecast(fit, h = 30)
future$mean<-invTransf(future$mean)
future$upper<-invTransf(future$upper)
future$lower<-invTransf(future$lower)
future$x<-invTransf(future$x)
plot(future,genbal_sub$enddate)
#Forecast 30 days out
future = forecast(fit, h = 30)
future$mean<-invTransf(future$mean)
future$upper<-invTransf(future$upper)
future$lower<-invTransf(future$lower)
future$x<-invTransf(future$x)
plot(future)
future
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
#Forecast 7 days out
future = forecast(fit, h = 7)
future$mean<-invTransf(future$mean)
future$upper<-invTransf(future$upper)
future$lower<-invTransf(future$lower)
future$x<-invTransf(future$x)
plot(future)
#Forecast 7 days out
future = forecast(fit, h = 7)
future$mean<-invTransf(future$mean)
future$upper<-invTransf(future$upper)
future$lower<-invTransf(future$lower)
future$x<-invTransf(future$x)
plot(future)
future
future$x
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
library(boot)
library(forecast) #to get fitted arima values via fitted()
setwd("~/Desktop/531w18/midterm_project")
sql<-function(str){
require(sqldf)
sqldf()
ret<-sqldf(str,drv="SQLite")
sqldf()
return(ret)
}
genbal = read.csv('data//generic_polllist.csv')
genbal_sub = subset(genbal, pollster == 'Ipsos')
genbal_sub = genbal_sub[,colnames(genbal_sub)%in%c('startdate','enddate','pollster','samplesize','population','dem','rep')]
genbal_sub$enddate = as.Date(genbal_sub$enddate,'%m/%d/%Y')
genbal_sub$dem_margin = genbal_sub$dem - genbal_sub$rep
#There are three diff polls for each day (see 1,269,537 rows of genbal_sub) with varying sampe sizes)
#    startdate    enddate pollster samplesize population  dem  rep
#36  5/19/2017 2017-05-23    Ipsos        405         rv 43.0 36.1
#452 5/19/2017 2017-05-23    Ipsos        499          a 37.7 32.5
#767 5/19/2017 2017-05-23    Ipsos        405         rv 43.0 36.1
#Here, we just weight the three polls per day by the sample sizes (dem, rep, and dem_margin)
genbal_sub = sql("
select
startdate
,enddate
,pollster
,sum(samplesize) as samplesize
,sum(samplesize*dem)/sum(samplesize) as dem
,sum(samplesize*rep)/sum(samplesize) as rep
,sum(samplesize*dem_margin)/sum(samplesize) as dem_margin
from genbal_sub gs
group by gs.enddate
")
#used to transform difference in percentage points (-100 to 100) to the real number line
transf = function(x){
logit((x/100 + 1)/2)
}
invTransf = function(x){
100*(2*inv.logit(x) - 1)
}
genbal_sub$dem_margin_trans = transf(genbal_sub$dem_margin)
#Plot untransformed democratic margin (diff in percentage points)
plot(genbal_sub$dem_margin,type='l')
#Plot untransformed time series of the differenced data
plot(diff(genbal_sub$dem_margin),type='l')
#plot time series of the transformed margin
plot(genbal_sub$dem_margin_trans,type='l')
#Plot time series the differenced transformed democratic margin
plot(diff(genbal_sub$dem_margin_trans),type='l')
acf(genbal_sub$dem_margin)
acf(genbal_sub$dem_margin_trans)
plist = qlist = aiclist = c()
for(p in 0:6){
for(q in 0:6){
fit = arima(genbal_sub$dem_margin_trans,order=c(p,1,q))
plist = append(plist,p)
qlist = append(qlist,q)
aiclist = append(aiclist,fit$aic)
}
}
aicdf = data.frame(p = plist, q = qlist, aic = aiclist)
#ARIMA(1,1,5) performs well by AIC criteria
aicdf
fit = arima(genbal_sub$dem_margin_trans,order=c(1,1,5))
fit
fit_vals = invTransf(fitted(fit))
genbal_sub$fitted = fit_vals
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
?loess
#Use Loess smoothing to estimate trend nonparametrically:
dem_margin_loess = loess(dem_margin ~ enddate,data=genbal_sub,span=0.5)
?loess
genbal_sub
row.names(genbal_sub)
#Use Loess smoothing to estimate trend nonparametrically:
dem_margin_loess = loess(genbal_sub$dem_margin ~ row.names(genbal_sub),span=0.5)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l')
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
legend('topright', c('hey','hey'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
legend('topright', c('hey','hey2'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
legend('topright', c('hey','hey2'))
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
legend('topright', c('hey','hey2'), col = 1:2, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
points(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:4, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,tye='l',col='red')
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
plot()
plot()
lines(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
lines(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
lines(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='blue')
lines(dem_margin ~ enddate,genbal_sub,type='l',col='blue')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = 1:3, lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('hey','hey2','hey3'), col = c('black','red','grey'), lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright', c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'), col = c('black','red','grey'), lty = 1)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topright',
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
legend(1,3,
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topleft',
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey',
main='Generic Ballot Ipsos Polling',
xlab = 'Poll End Date',
ylab = 'Democratic Margin (%-Points)')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red')
legend('topleft',
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey',
main='Generic Ballot Ipsos Polling',
xlab = 'Poll End Date',
ylab = 'Democratic Margin (%-Points)')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red',lwd=2)
legend('topleft',
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
library(boot)
library(forecast) #to get fitted arima values via fitted()
setwd("~/Desktop/531w18/midterm_project")
sql<-function(str){
require(sqldf)
sqldf()
ret<-sqldf(str,drv="SQLite")
sqldf()
return(ret)
}
genbal = read.csv('data//generic_polllist.csv')
genbal_sub = subset(genbal, pollster == 'Ipsos')
genbal_sub = genbal_sub[,colnames(genbal_sub)%in%c('startdate','enddate','pollster','samplesize','population','dem','rep')]
genbal_sub$enddate = as.Date(genbal_sub$enddate,'%m/%d/%Y')
genbal_sub$dem_margin = genbal_sub$dem - genbal_sub$rep
#There are three diff polls for each day (see 1,269,537 rows of genbal_sub) with varying sampe sizes)
#    startdate    enddate pollster samplesize population  dem  rep
#36  5/19/2017 2017-05-23    Ipsos        405         rv 43.0 36.1
#452 5/19/2017 2017-05-23    Ipsos        499          a 37.7 32.5
#767 5/19/2017 2017-05-23    Ipsos        405         rv 43.0 36.1
#Here, we just weight the three polls per day by the sample sizes (dem, rep, and dem_margin)
genbal_sub = sql("
select
startdate
,enddate
,pollster
,sum(samplesize) as samplesize
,sum(samplesize*dem)/sum(samplesize) as dem
,sum(samplesize*rep)/sum(samplesize) as rep
,sum(samplesize*dem_margin)/sum(samplesize) as dem_margin
from genbal_sub gs
group by gs.enddate
")
#used to transform difference in percentage points (-100 to 100) to the real number line
transf = function(x){
logit((x/100 + 1)/2)
}
invTransf = function(x){
100*(2*inv.logit(x) - 1)
}
genbal_sub$dem_margin_trans = transf(genbal_sub$dem_margin)
#Plot untransformed democratic margin (diff in percentage points)
plot(genbal_sub$dem_margin,type='l')
#Plot untransformed time series of the differenced data
plot(diff(genbal_sub$dem_margin),type='l')
#plot time series of the transformed margin
plot(genbal_sub$dem_margin_trans,type='l')
#Plot time series the differenced transformed democratic margin
plot(diff(genbal_sub$dem_margin_trans),type='l')
acf(genbal_sub$dem_margin)
acf(genbal_sub$dem_margin_trans)
plist = qlist = aiclist = c()
for(p in 0:6){
for(q in 0:6){
fit = arima(genbal_sub$dem_margin_trans,order=c(p,1,q))
plist = append(plist,p)
qlist = append(qlist,q)
aiclist = append(aiclist,fit$aic)
}
}
aicdf = data.frame(p = plist, q = qlist, aic = aiclist)
#ARIMA(1,1,5) performs well by AIC criteria
aicdf
fit = arima(genbal_sub$dem_margin_trans,order=c(1,1,5))
fit
fit_vals = invTransf(fitted(fit))
genbal_sub$fitted = fit_vals
#Use Loess smoothing to estimate trend nonparametrically:
dem_margin_loess = loess(genbal_sub$dem_margin ~ row.names(genbal_sub),span=0.5)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey',
main='Generic Ballot Ipsos Polling',
xlab = 'Poll End Date',
ylab = 'Democratic Margin (%-Points)')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red',lwd=2)
legend('topleft',
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
#Forecast 7 days out
future = forecast(fit, h = 7)
future$mean<-invTransf(future$mean)
future$upper<-invTransf(future$upper)
future$lower<-invTransf(future$lower)
future$x<-invTransf(future$x)
plot(future)
fit = arima(genbal_sub$dem_margin_trans,order=c(1,1,3))
fit
fit_vals = invTransf(fitted(fit))
genbal_sub$fitted = fit_vals
#Use Loess smoothing to estimate trend nonparametrically:
dem_margin_loess = loess(genbal_sub$dem_margin ~ row.names(genbal_sub),span=0.5)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey',
main='Generic Ballot Ipsos Polling',
xlab = 'Poll End Date',
ylab = 'Democratic Margin (%-Points)')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red',lwd=2)
legend('topleft',
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
library(boot)
library(forecast) #to get fitted arima values via fitted()
setwd("~/Desktop/531w18/midterm_project")
sql<-function(str){
require(sqldf)
sqldf()
ret<-sqldf(str,drv="SQLite")
sqldf()
return(ret)
}
genbal = read.csv('data//generic_polllist.csv')
genbal_sub = subset(genbal, pollster == 'Ipsos')
genbal_sub = genbal_sub[,colnames(genbal_sub)%in%c('startdate','enddate','pollster','samplesize','population','dem','rep')]
genbal_sub$enddate = as.Date(genbal_sub$enddate,'%m/%d/%Y')
genbal_sub$dem_margin = genbal_sub$dem - genbal_sub$rep
#There are three diff polls for each day (see 1,269,537 rows of genbal_sub) with varying sampe sizes)
#    startdate    enddate pollster samplesize population  dem  rep
#36  5/19/2017 2017-05-23    Ipsos        405         rv 43.0 36.1
#452 5/19/2017 2017-05-23    Ipsos        499          a 37.7 32.5
#767 5/19/2017 2017-05-23    Ipsos        405         rv 43.0 36.1
#Here, we just weight the three polls per day by the sample sizes (dem, rep, and dem_margin)
genbal_sub = sql("
select
startdate
,enddate
,pollster
,sum(samplesize) as samplesize
,sum(samplesize*dem)/sum(samplesize) as dem
,sum(samplesize*rep)/sum(samplesize) as rep
,sum(samplesize*dem_margin)/sum(samplesize) as dem_margin
from genbal_sub gs
group by gs.enddate
")
#used to transform difference in percentage points (-100 to 100) to the real number line
transf = function(x){
logit((x/100 + 1)/2)
}
invTransf = function(x){
100*(2*inv.logit(x) - 1)
}
genbal_sub$dem_margin_trans = transf(genbal_sub$dem_margin)
#Plot untransformed democratic margin (diff in percentage points)
plot(genbal_sub$dem_margin,type='l')
#Plot untransformed time series of the differenced data
plot(diff(genbal_sub$dem_margin),type='l')
#plot time series of the transformed margin
plot(genbal_sub$dem_margin_trans,type='l')
#Plot time series the differenced transformed democratic margin
plot(diff(genbal_sub$dem_margin_trans),type='l')
acf(genbal_sub$dem_margin)
acf(genbal_sub$dem_margin_trans)
plist = qlist = aiclist = c()
for(p in 0:6){
for(q in 0:6){
fit = arima(genbal_sub$dem_margin_trans,order=c(p,1,q))
plist = append(plist,p)
qlist = append(qlist,q)
aiclist = append(aiclist,fit$aic)
}
}
aicdf = data.frame(p = plist, q = qlist, aic = aiclist)
#ARIMA(1,1,5) performs well by AIC criteria
aicdf
fit = arima(genbal_sub$dem_margin_trans,order=c(1,1,5))
fit
fit_vals = invTransf(fitted(fit))
genbal_sub$fitted = fit_vals
#Use Loess smoothing to estimate trend nonparametrically:
dem_margin_loess = loess(genbal_sub$dem_margin ~ row.names(genbal_sub),span=0.5)
plot(dem_margin ~ enddate,genbal_sub,type='l',col='grey',
main='Generic Ballot Ipsos Polling',
xlab = 'Poll End Date',
ylab = 'Democratic Margin (%-Points)')
lines(fitted ~ enddate,genbal_sub,type='l',lwd=2)
lines(genbal_sub$enddate,dem_margin_loess$fitted,type='l',col='red',lwd=2)
legend('topleft',
c('ARIMA(1,1,5) Fit','Loess Smoothing','Observed'),
col = c('black','red','grey'), lty = 1,cex=0.8)
prod(c(1, 4, 10, 20, 35, 56, 84, 120, 165, 220))
prod(c(1, 4, 10, 20, 35, 56, 84, 120, 165, 220))^(1/10)
